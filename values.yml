image:
  repository: velero/velero
  tag: v1.11.0
  pullPolicy: Always
  imagePullSecrets: []
annotations: {}
labels: {}
podAnnotations: 
podLabels: {}
resources:
  requests:
    cpu: 500m
    memory: 128Mi
  limits:
    cpu: 1000m
    memory: 512Mi
dnsPolicy: ClusterFirst
initContainers:
  - name: velero-plugin-for-microsoft-azure
    image: velero/velero-plugin-for-microsoft-azure:v1.6.0
    imagePullPolicy: IfNotPresent
    volumeMounts:
      - mountPath: /target
        name: plugins
podSecurityContext: {}
containerSecurityContext: {}
lifecycle: {}
priorityClassName: ""
terminationGracePeriodSeconds: 3600
tolerations: []
affinity: {}
nodeSelector: {}
dnsConfig: {}
extraVolumes: []
extraVolumeMounts: []
extraObjects: []
metrics:
  enabled: true
  scrapeInterval: 30s
  scrapeTimeout: 10s
  service:
    annotations: {}
    labels: {}
  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8085"
    prometheus.io/path: "/metrics"
  serviceMonitor:
    enabled: false
    additionalLabels: {}
  prometheusRule:
    enabled: false
    additionalLabels: {}
    spec: []
kubectl:
  image:
    repository: docker.io/bitnami/kubectl
  containerSecurityContext: {}
  resources: {}
  annotations: {}
  labels: {}
upgradeCRDs: true
cleanUpCRDs: false
configuration:
  backupStorageLocation:
  - name: 
    provider: azure
    bucket: velero
    caCert:
    prefix:
    default: true
    accessMode: ReadWrite
    config:
      storageAccount: velero0574
      resourceGroup: Velero_Backups
      subscriptionId: xxxxxxxxxxxxxxxxxxxxxxxx
  volumeSnapshotLocation:
  - name: snapshots
    provider: azure
    config:
      apiTimeout: 5m
      resourceGroup: Velero_Backups
      subscriptionId: xxxxxxxxxxxxxxxxxxxxxxxx
  backupSyncPeriod:
  restoreResourcePriorities:
  restoreOnlyMode:
  clientQPS:
  clientBurst:
  clientPageSize:
  disableControllers:
  storeValidationFrequency:
  garbageCollectionFrequency:
  namespace: velero
  extraEnvVars: {}
  features:
  logLevel: debug
  logFormat:
  defaultVolumesToRestic:
  defaultResticPruneFrequency:
rbac:
  create: true
  clusterAdministrator: true
  clusterAdministratorName: cluster-admin
serviceAccount:
  server:
    create: true
    name:
    annotations:
    labels:
credentials:
  useSecret: true
  name: cloud-credentials
  existingSecret: 
  secretContents:
   cloud: |
     AZURE_CLIENT_ID=xxxxxxxxxxxxxxxxxxxxxxxx
     AZURE_CLIENT_SECRET=xxxxxxxxxxxxxxxxxxxxxxxx
     AZURE_SUBSCRIPTION_ID=xxxxxxxxxxxxxxxxxxxxxxxx
     AZURE_TENANT_ID=xxxxxxxxxxxxxxxxxxxxxxxx
     AZURE_CLOUD_NAME=AzurePublicCloud
     AZURE_RESOURCE_GROUP=xxxxxxxxxxxxxxxxxxxxxxxx
  extraEnvVars: {}
  extraSecretRef: ""
backupsEnabled: true
snapshotsEnabled: true
schedules:
  mybackup:
    disabled: false
    schedule: "0 1 * * *"  # 01:00 am every day
    template:
      ttl: "120h"
      includedNamespaces:
      - default
      - test
configMaps: {}